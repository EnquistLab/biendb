# Preparing names export for processing with TNRSbatch

These steps should be performed in the database, before dumping names list to the file system. Much harder to do in bash.  

## Steps:

1. Delete any name *not* beginning with a letter, double quotes or single quotes. These wreak havoc on the TNRS and are almost always crap:

```
DELETE FROM tnrs_submitted
WHERE NOT name_submitted  ~* '^[a-zA-Z]' AND NOT name_submitted ~ '^\"' AND NOT name_submitted ~ '^'''
;
```

2. Replace embedded line endings *inside* names with single whitespace

```
-- DOS
UPDATE tnrs_submitted
SET name_submitted=regexp_replace(name_submitted, '[\r\n]' , ' ', 'g' )
WHERE name_submitted ~ '\r\n'
;

-- UNIX
UPDATE tnrs_submitted
SET name_submitted=regexp_replace(name_submitted, '[\n]' , ' ', 'g' )
WHERE name_submitted ~ '\n'
;

-- Legacy Mac
UPDATE tnrs_submitted
SET name_submitted=regexp_replace(name_submitted, '[\r]' , ' ', 'g' )
WHERE name_submitted ~ '\r'
;

-- Unicode line separator U2028*+
UPDATE tnrs_submitted
SET name_submitted=regexp_replace(name_submitted, E'[\\n\\r\\u2028]+', ' ', 'g' )
WHERE name_submitted ~ E'[\\n\\r\\u2028]+'
;
-- Other unicode line endings*+
UPDATE tnrs_submitted
SET name_submitted=regexp_replace(name_submitted, E'[\\n\\r\\f\\u000B\\u0085\\u2028\\u2029]+', ' ', 'g' )
WHERE name_submitted ~ E'[\\n\\r\\f\\u000B\\u0085\\u2028\\u2029]+'
;
```

3. Cut possible hidden line endings from known bad names causing undiagnosed crash of TNRSbatch

```
UPDATE tnrs_submitted 
SET name_submitted='Lamiaceae Agastache pallidiflora (Heller) Rydb. spp. pallidiflora var. gilensis R. W. Sanders'
WHERE name_submitted_verbatim LIKE 'Lamiaceae Agastache pallidiflora (Heller) Rydb. spp. pallidiflora var. gilensis % Sanders%'
;
UPDATE tnrs_submitted 
SET name_submitted='Lamiaceae Agastache pallidiflora spp. neomexicana var. neomexicana'
WHERE name_submitted_verbatim LIKE 'Lamiaceae Agastache pallidiflora spp. neomexicana var. neomexicana%'
;
```

## Validations

### To visualize embedded line endings:

```
SELECT name_submitted_verbatim,
CASE 
WHEN name_submitted_verbatim ~ '\r\n' THEN 'dos'
WHEN name_submitted_verbatim ~ '\n' THEN 'unix'
WHEN name_submitted_verbatim ~ '\r' THEN 'mac'
ELSE 'other unicode'
END 
AS line_ending_type,
CASE 
WHEN name_submitted_verbatim ~ '\r\n' THEN regexp_replace(name_submitted_verbatim, '[\r\n]' , ' ', 'g' )
WHEN name_submitted_verbatim ~ '\n' THEN regexp_replace(name_submitted_verbatim, '[\n]' , ' ', 'g' )
WHEN name_submitted_verbatim ~ '\r' THEN regexp_replace(name_submitted_verbatim, '[\r]' , ' ', 'g' )
ELSE regexp_replace(name_submitted_verbatim, E'[\\n\\r\\f\\u000A\\u000C\\u000D\\u000B\\u0085\\u2028\\u2029]+', ' ', 'g' )
END 
AS name_submitted_fixed
FROM tnrs_submitted
WHERE name_submitted_verbatim ~ E'[\\n\\r\\f\\u000A\\u000C\\u000D\\u000B\\u0085\\u2028\\u2029]+'
;
```

### To confirm line endings fixed:

```
SELECT 
name_submitted
FROM tnrs_submitted
WHERE name_submitted ~ '\r\n' 
OR name_submitted ~ '\n' 
OR name_submitted ~ '\r'
OR name_submitted ~ E'[\\n\\r\\u2028]+'
OR name_submitted ~ E'[\\n\\r\\f\\u000B\\u0085\\u2028\\u2029]+'
OR name_submitted ~ E'[\\n\\r\\f\\u000A\\u000C\\u000D]+'
;
```

## References:

* https://stackoverflow.com/questions/7836906/how-to-remove-carriage-returns-and-new-lines-in-postgresql  
* https://en.wikipedia.org/wiki/Newline#Unicode 

##########################################

### To fix text file with embedded line endings

cp tnrs_scrubbed.complete.copy.txt tnrs_scrubbed.complete.txt

# This removes unicode newlines, should affect "true" newlines
# Unedited original saved as tnrs_scrubbed.complete.txt.bak
perl -i.bak -pe 's/[\f\u000A\u000C\u000D\u000B\u0085\u2028\u2029]+//' tnrs_scrubbed.complete.txt

# This replaces only the "good" newlines
# Original (only unicode removed) saved as tnrs_scrubbed.complete.txt.bak2
perl -i.bak2 -pe 's/\t[0-9]*[0-9]\n/TABdigitsNEWLINE/' tnrs_scrubbed.complete.txt

# This removes all remaining newlines (CRLF, CR & LF), leaving a file with no newlines
tr -d '\r\n' < tnrs_scrubbed.complete.txt > tempfile

# Chunks big file into lines at delimiter and appends to new file
awk '{ print $0 >> "tempfile2" }' RS='TABdigitsNEWLINE' tempfile

# Remove literal '\n' and '\r', if any
sed -i 's/\\r/ /g' tempfile2
sed -i 's/\\n/ /g' tempfile2

# Remove all single and double quotes
tr -d \'\" < tempfile2 > tempfile

# Restore the final <tab>
# Digit afterward doesn't matter, use zero for all
sed -i 's/$/\t0/g' tempfile

# Restore the header
sed 's/Source,Warnings/Source,Warnings\n/' tempfile > tnrs_scrubbed.complete.txt

# Clean up
rm tempfile*


